//obtain source from https://github.com/payden/libwebsock
//TODO add this as a submodule?
import libwebsock_* from "../bin/libwebsock.so.1.0.7";

struct libwebsock_context
{
	running : int;
	ssl_init : int;
	flags : int;
	owns_base : int;
	base : pointer;
	onmessage : pointer;
	control_callback : pointer;
	onopen : pointer;
	onclose : pointer;
	onpong : pointer;
	clients : pointer;
	userdata : pointer;
};
struct libwebsock_client
{
	sockfd : int;
	flags : int;
	userdata : pointer;
	current_frame : pointer;
	sa : pointer;
	bev : pointer;
	tlist : pointer;
	thread_lock{40}; //pthread_mutex
	onmessage : pointer;
	control_callback : pointer;
	onopen : pointer;
	onclose : pointer;
	onpong : pointer;
	ssl : pointer; //<- this means that libwebsock needs to be compiled with SSL support
	close_info : pointer;
	ctx : pointer;
	next : pointer;
	prev : pointer;

	get server
	{
		var context = cast_stack<libwebsock_context>ctx;
		return as<struct>context.userdata;
	}

	send(msg)
	{
		libwebsock_send_text(this, msg);
	}
	sendBinary(buff, len)
	{
		libwebsock_send_binary(this, buff, len);
	}

	close(code = 1000, reason = NULL)
	{
		libwebsock_close_with_reason(this, code, reason);
	}
};
struct libwebsock_message
{
	opcode : uint;
	length : ulonglong;
	payload : native;
};

struct WebSocketServer
{
	socket;

	onopen = null;
	onclose = null;
	onmessage = null;
	userdata = undefined;

	constructor(port = "6060", host = "0.0.0.0")
	{
		socket = libwebsock_init!pointer();

		if(typeof port != type<native>)
			port = cast<string>port;
		libwebsock_bind(socket, host, port);
	}
	destructor()
	{
		throw "Cannot close WebSocketServer, libwebsock doesnt support that :(";
	}

	private _onopen(client)
	{
		client = cast_stack<libwebsock_client>client;
		this = client.server;

		if(onopen)
			onopen(client);
	}
	private _onclose(client)
	{
		client = cast_stack<libwebsock_client>client;
		this = client.server;

		if(onclose)
			onclose(client);
	}
	private _onmessage(client, msg)
	{
		client = cast_stack<libwebsock_client>client;
		this = client.server;

		if(onmessage)
		{
			msg = cast_stack<libwebsock_message>msg;
			onmessage(client, msg.payload[0 .. msg.length], msg.opcode);
		}
	}

	broadcast(msg)
	{
		libwebsock_send_all_text(socket, msg);
	}

	listen()
	{
		var sock = cast_stack<libwebsock_context>socket;
		sock.onopen = cast<native>_onopen;
		sock.onclose = cast<native>_onclose;
		sock.onmessage = cast<native>_onmessage;
		sock.userdata = this;

		libwebsock_wait(socket);
	}
};
