import HTTP from "./curl.ptrs";
import List from "./list.ptrs";
import Map from "./map.ptrs";
import json_encode, json_decode, json_destroy from "./json.ptrs";
import strcpy, free;

struct MessageUpdate
{
	id;
	chat;
	time;
	senderId;
	sender;
	text;

	private bot;

	constructor(data, _bot)
	{
		id = data.message_id;
		chat = data.chat.id;

		if("date" in data)
			time = data.date;
		else
			time = 0;

		senderId = data.from.id;

        sender = new array{sizeof data.from.first_name};
        strcpy(sender, data.from.first_name);

		if("text" in data)
        {
            text = new array{sizeof data.text};
            strcpy(text, data.text);
        }
		else
        {
            text = NULL;
        }

		bot = _bot;
	}
	destructor()
	{
        delete sender;
		if(text != NULL)
			delete text;
	}

	reply(msg, mode, markup)
	{
		bot.sendMessage(chat, msg, mode, markup, id);
	}
};

struct CallbackQuery
{
	chat;
	id;
	senderId;
	sender;
	message;
	action;

	private bot;

	constructor(data, _bot)
	{
		id = new array{sizeof data.id};
        strcpy(id, data.id);
		sender = new array{sizeof data.from.first_name};
        strcpy(sender, data.from.first_name);
		action = new array{sizeof data.data};
        strcpy(action, data.data);

        senderId = data.from.id;
        message = new MessageUpdate(data.message, _bot);
		bot = _bot;
	}
	destructor()
	{
		delete message;
        delete id;
        delete sender;
        delete action;
	}

	answer(text, alert = false)
	{
		var req = new Map();
		req.callback_query_id = id;
		req.text = text;

		if(alert)
			req.alert = true;

		bot.makeRequest("answerCallbackQuery", req);
		delete req;
	}
};

struct InlineKeyboard
{
	inline_keyboard;

	constructor(rowCount = 1)
	{
		inline_keyboard = new List();
		this.addRow(rowCount);
	}

	destructor()
	{
		foreach(i, row in inline_keyboard)
		{
			foreach(j, elem in row)
			{
				delete elem.text;
				delete elem.callback_data;
				delete elem;
			}
			delete row;
		}
		delete inline_keyboard;
	}

	addRow(count = 1)
	{
		for(var i = 0; i < count; i++)
			inline_keyboard.add(new List());
	}

	addButton(row = 0, text, action = text)
	{
		text = cast<string>text;
		action = cast<string>action;

		var _text = new array{sizeof text};
		strcpy(_text, text);
		var _action = new array{sizeof action};
		strcpy(_action, action);

		var elem = map {
			text: _text,
			callback_data: _action
		};
		inline_keyboard[row].add(elem);
	}
};

struct Telegram
{
	private token;
	offset = 0;
	constructor(_token)
	{
		token = _token;
	}

	makeRequest(path, data)
	{
		var url = "https://api.telegram.org/bot$token/$path";
		var resp;

		data = json_encode(data);
		resp = HTTP.POST(url, data, map_stack {
			"Content-Type": "application/json"
		});
		json_destroy(data);

		var data = undefined;
		try
		{
			data = json_decode(resp.body);

			if(!("ok" in data) || !data.ok)
				throw data.description;
		}
		finally
		{
			delete resp;
		}

		return data;
	}

	getUpdate()
	{
		var allowed_updates = new_stack array[] ["message", "callback_query"];
		var req = map_stack {
			limit: 1,
			timeout: 0x7FFFFFFF,
			allowed_updates: allowed_updates,
			offset: offset
		};

		while(true)
		{
			req.offset = offset;
			var res = makeRequest("getUpdates", req);

			if(res.result.length == 0)
			{
				json_destroy(res);
				continue;
			}

			var update = res.result[0];
			offset = update.update_id + 1;

			if("message" in update && "text" in update.message)
			{
				var ret = new MessageUpdate(update.message, this);
				json_destroy(res);
				return ret;
			}
			else if("callback_query" in update)
			{
				var ret = new CallbackQuery(update.callback_query, this);
				json_destroy(res);
				return ret;
			}
			else
			{
				json_destroy(res);
			}
		}
	}

	sendMessage(chat, msg, mode, markup, replyTo)
	{
		var req = map_stack {
			chat_id: chat,
			text: msg,
			parse_mode: mode,
			reply_to_message_id: replyTo,
			reply_markup: markup
		};

		var res = makeRequest("sendMessage", req);
		var id = res.result.message_id;
		json_destroy(res);
		return id;
	}

	editMessage(chat, id, text, mode, markup)
	{
		var req = map_stack {
			chat_id: chat,
			message_id: id,
			text: text,
			parse_mode: mode,
			reply_markup: markup
		};

		var res = makeRequest("editMessageText", req);
		var id = res.result.message_id;
		json_destroy(res);
		return id;
	}
};
