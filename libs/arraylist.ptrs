import memcpy;

struct ArrayList
{
	private arraylen; //length of arrays
	private first = null; //first array (the first element points to the next array)
	private _length = 0;

	get length
	{
		return _length;
	}

	constructor(_arraylen = 127)
	{
		arraylen = _arraylen;
	}

	private getEntry(index, prev = null)
	{
		index = cast<int>index;
		if(index < 0 || index > _length)
			throw "Index $index is not in an array-list of length $_length";

		var _prev = &first;
		var curr = first;
		while(index > sizeof curr)
		{
			index -= sizeof curr - 1;
			_prev = curr;
			curr = curr[0];
		}

		if(prev != null)
			*prev = _prev;

		return curr + index + 1;
	}

	operator this[index]
	{
		return *getEntry(index);
	}
	operator &this[index]
	{
		return getEntry(index);
	}
	operator this[index](args...)
	{
		return (*getEntry(index))(...args);
	}

	operator this[index] = value
	{
		index = cast<int>index;

		if(index < 0 || index > _length)
			throw "Cannot set index $index of an array-list of length $_length";
		else if(index == _length)
			this.add(value);
		else
			*getEntry(index) = value;
	}

	operator index in this
	{
		index = cast<int>index;
		return index > 0 && index < _length;
	}
	operator sizeof this
	{
		return _length;
	}

	operator foreach in this
	{
		var curr = first;
		var i = 0;
		while(true)
		{
			for(var j = 1; j < sizeof curr; j++ && i++)
			{
				if(yield i, curr[j])
					return;
			}

			if(i >= _length)
				break;
			curr = curr[0];
		}
	}

	add(values...)
	{
		var prev = &first;
		var curr = first;
		if(curr != null)
		{
			while(curr[0])
			{
				prev = curr;
				curr = curr[0];
			}
		}
		else if(sizeof values > 0)
		{
			curr = new array[arraylen + 1];
			curr[0] = null;
			curr = curr[0 .. 1];
		}

		foreach(_, val in values)
		{
			var index = sizeof curr;
			if(index == arraylen + 1)
			{
				var arr = new array[arraylen + 1];
				arr[0] = null;

				curr[0] = arr;
				prev = curr;

				curr = arr[0 .. 1];
				index = 1;
			}

			curr = curr[0 .. $ + 1];
			prev[0] = curr;

			curr[index] = val;
			_length++;
		}
	}

	splice(index, removeCount)
	{
		index = cast<int>index;
		if(index + removeCount >= _length)
			throw "Cannot remove $removeCount entries at index $index from an array-list of size $_length";

		var prev;
		var ptr = getEntry(index, &prev);
		var curr = prev[0];

		_length -= removeCount;
		while(removeCount > 0)
		{
			if(ptr == &curr[1] && removeCount >= sizeof curr - 1)
			{
				prev[0] = curr[0];
				var old = curr;
				removeCount -= sizeof curr - 1;

				curr = curr[0];
				if(curr != null)
					ptr = &curr[1];

				delete old;
			}
			else if(ptr + removeCount >= curr + sizeof curr)
			{
				var count = curr + sizeof curr - ptr - 1;
				prev[0] = curr[0 .. $ - count];
				removeCount -= count;

				prev = curr;
				curr = curr[0];
				ptr = &curr[1];
			}
			else
			{
				var start = ptr + removeCount;
				memcpy(ptr, start, (curr + sizeof curr - start) * sizeof var);
				prev[0] = curr[0 .. $ - removeCount];
				break;
			}
		}
	}
};
