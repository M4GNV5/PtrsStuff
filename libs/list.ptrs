import qsort;

struct ListEntry
{
	value;
	next;

	constructor(value, next = null)
	{
		this.value = value;
		this.next = next;
	}
};

struct List
{
	first = null;
	last = null;
	private _length = 0;

	destructor()
	{
		var curr = this.first;
		while(curr != null)
		{
			var prev = curr;
			curr = curr.next;
			delete prev;
		}
	}

	operator this[index]
	{
		index = cast<int>index;
		return this.getEntry(index).value;
	}
	operator this[index] = value
	{
		index = cast<int>index;
		if(index < 0 || index > _length)
			throw "Cannot set index $index of a list of length $_length";

		if(index == _length)
			this.add(value);
		else
			this.getEntry(index).value = value;
	}
	operator &this[index]
	{
		index = cast<int>index;
		return &(this.getEntry(index).value);
	}
	operator this[index](args...)
	{
		index = cast<int>index;
		return this.getEntry(index).value(...args);
	}

	operator index in this
	{
		index = cast<int>index;
		return index >= 0 && index < _length;
	}
	operator sizeof this
	{
		return _length;
	}
	operator foreach in this
	{
		var i = 0;
		var curr = this.first;
		while(curr != null)
		{
			var next = curr.next;
			if(yield i++, curr.value, &curr.value)
				return;
			curr = next;
		}
	}

	get length
	{
		return _length;
	}

	getEntry(index, previous = null)
	{
		if(index < 0 || index >= _length)
			throw "Index $index is not in list of length $_length";

		var prev = null;
		var curr = this.first;
		var _index = index;
		while(_index-- > 0)
		{
			prev = curr;
			curr = curr.next;
		}

		if(previous != null)
			*previous = prev;
		return curr;
	}

	add(values...)
	{
		for(var i = 0; i < sizeof(values); i++)
		{
			var entry = new ListEntry(values[i]);

			if(this.last == null)
				this.first = entry;
			else
				this.last.next = entry;
			this.last = entry;
		}
		_length += sizeof(values);
	}

	removeAt(index)
	{
		var prev;
		var curr = this.getEntry(index, &prev);
		var val = curr.value;

		if(prev == null)
			this.first = curr.next;
		else
			prev.next = curr.next;

		if(this.first == null)
			this.last = null;

		_length--;
		delete curr;
		return val;
	}

	remove(val, compare = (===))
	{
		var prev = null;
		var curr = this.first;

		while(curr != null)
		{
			if(compare(curr.value, val))
			{
				if(prev == null)
					this.first = curr.next;
				else
					prev.next = curr.next;

				if(this.first == null)
					this.last = null;

				_length--;
				delete curr;
				return val;
			}

			prev = curr;
			curr = curr.next;
		}

		throw "Cannot remove '${cast<string>val}' from list: No such entry";
	}

	/*private _reverse(prev, next)
	{
		if(next.next != null)
			_reverse(next, next.next);
		else
			this.first = next;
		next.next = prev;
		return prev;
	}
	reverse()
	{
		this.last = _reverse(this.first, this.first.next);
		this.last.next = null;
	}*/

	reverse()
	{
		var prev = null;
		var curr = this.first;
		while(curr != null)
		{
			var next = curr.next;
			curr.next = prev;
			prev = curr;
			curr = next;
		}

		curr = this.first;
		this.first = this.last;
		this.last = curr;
	}

	splice(index, deleteCount, insert...)
	{
		var prev;
		var curr = this.getEntry(index, &prev);

		for(var i = 0; i < deleteCount; i++)
		{
			var old = curr;
			curr = curr.next;
			delete old;
		}
		_length -= deleteCount;

		for(var i = sizeof(insert) - 1; i >= 0; i--)
		{
			curr = new ListEntry(insert[i], curr);
		}
		_length += sizeof(insert);

		if(prev == null)
			this.first = curr;
		else
			prev.next = curr;
	}

	indexOf(value, start = 0, compare = (===))
	{
		var curr = this.getEntry(start);
		for(var i = 0; curr != null; i++)
		{
			if(compare(curr.value, value))
				return i;
			curr = curr.next;
		}
		return -1;
	}
	lastIndexOf(value, end, compare = (===))
	{
		var last = -1;
		var curr = this.first;
		for(var i = 0; curr != null; i++)
		{
			if(compare(curr.value, value, i))
				last = i;
			if(end && i >= end)
				break;
			curr = curr.next;
		}
		return last;
	}

	sort(buff, max, compare = (-))
	{
		var proxyCompare = (a, b) -> compare(*as<pointer>a, *as<pointer>b);
		buff = this.toArray(buff, max);

		qsort(buff, sizeof buff, VARSIZE, proxyCompare);
		return buff;
	}

	static fromArray(buff, len = sizeof(buff))
	{
		var list = new List();
		var subset = buff[0 .. len];
		list.add(...subset);

		return list;
	}
	toArray(buff, max)
	{
		if(typeof max == type<undefined>)
			max = buff ? sizeof buff : _length;
		if(typeof buff == type<undefined>)
			buff = new array[max];

		var curr = this.first;
		for(var i = 0; curr != null && i < max; i++)
		{
			buff[i] = curr.value;
			curr = curr.next;
		}

		return buff;
	}
};
