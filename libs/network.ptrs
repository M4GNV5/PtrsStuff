import "malloc", "free", "memset", "strlen";
import "SDLNet_ResolveHost", "SDLNet_TCP_Open", "SDLNet_TCP_Close",
 	"SDLNet_TCP_Send", "SDLNet_TCP_Recv", "SDL_GetError" from "libSDL_net-1.2.so.0";

struct Socket
{
	ip;
	socket;
	connected;
	constructor()
	{
		this.connected = false;
		this.socket = NULL;
	}

	connect(domain, port)
	{
		if(this.connected)
			return "Already connected";

		this.ip = malloc(64);
		SDLNet_ResolveHost(this.ip, domain, port);

		this.socket = SDLNet_TCP_Open(this.ip);

		if(this.socket == NULL)
			return (string)SDL_GetError() || "Could not connect to server";

		this.connected = true;
	}
	disconnect()
	{
		if(!this.connected)
			return "Not connected";

		SDLNet_TCP_Close(this.socket);
		free(this.ip);
		this.connected = false;
	}

	send(buff, len)
	{
		if(!this.connected)
			return "Not connected";

		buff = buff || NULL;
		len = len || -1;

		var result = SDLNet_TCP_Send(this.socket, buff, len);
		if(result < len)
			return (string)SDL_GetError() || "Unknown SDLNet error";
	}
	sends(str)
	{
		return this.send(str, strlen(str));
	}
	sendc(val)
	{
		var buff[1];
		memset(buff, val, 1);
		return this.send(buff, 1);
	}

	recv(buff, len)
	{
		if(!this.connected)
			return "Not connected";

		buff = buff || NULL;
		len = len || -1;

		var result = SDLNet_TCP_Recv(this.socket, buff, len);
		if(result <= 0)
			return (string)SDL_GetError() || "Unknown SDLNet error";
	}
	read(buff, max, end)
	{
		var pos = 0;
		var err;
		var curr[1];
		memset(curr, 0, 1);

		while(*curr != end && pos < max)
		{
			if(err = this.recv(curr, 1))
				return err;

			memset(buff + pos, *curr, 1);
			pos++;
		}
	}
};
