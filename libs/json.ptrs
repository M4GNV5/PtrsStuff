import "printf", "malloc", "free", "memset", "strtod", "ptrs_typetoa",
	"strncmp", "strlen", "strdup", "sprintf", "asprintf";

function json_encode(val, callback, indent)
{
	function escapeString(str)
	{
		var ptr = "";
		//TODO special char escaping
		asprintf(&ptr, "\"%s\"", str);
		return ptr;
	}

	if(callback)
		val = callback(val) || val;
	indent = indent || 0;

	if(typeof val == type<native>)
	{
		return escapeString(val);
	}

	if(typeof val == type<struct>)
	{
		var count = 0;
		for(var key in val)
			count++;

		if(count == 0)
			return strdup("{}");

		var strings{count};
		var len = 2;

		var i = 0;
		for(var key in val)
		{
			//fooasfsaf * sfgsgas;
			strings[i] = json_encode(val[key], callback, indent);
			len += strlen(key) + strlen(strings[i]) + 1;
			i++;
		}

		var ptr = malloc(len);
		var curr = ptr;
		i = 0;
		memset(curr, '{', 1);
		curr++;

		for(var key in val)
		{
			curr += sprintf(curr, "\"%s\":%s,", key, strings[i]);
			free(strings[i]);
			i++;
		}

		memset(curr, 0, 1);
		memset(curr - 1, '}', 1);
		return cast<native>ptr;
	}

	var ptr = "";
	if(typeof val == type<undefined>)
		asprintf(&ptr, "null");
	else if(typeof val == type<int>)
		asprintf(&ptr, "%ld", val);
	else if(typeof val == type<float>)
		asprintf(&ptr, "%g", val);
	else
		asprintf(&ptr, "\"%s:%p\"", ptrs_typetoa(typeof val), val);

	return ptr;
}
