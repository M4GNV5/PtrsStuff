import sprintf, strncpy, strlen, strdup, free, strncmp, strtol, strtod;
import Map from "./map.ptrs";
import List from "./list.ptrs";

var escapeSequences = map {
	"\"": '"',
	"\\": '\\',
	"/": '/',
	"\b": 'b',
	"\f": 'f',
	"\n": 'n',
	"\r": 'r',
	"\t": 't'
};

var unescapeSequences = map {
	"\"": '"',
	"\\": '\\',
	"/": '/',
	"b": '\b',
	"f": '\f',
	"n": '\n',
	"r": '\r',
	"t": '\t'
};

function json_encode(val)
{
	if(typeof val == type<undefined>)
	{
		return as<native>strdup("null");
	}
	else if(typeof val == type<int> || typeof val == type<float>)
	{
		return as<native>strdup(cast<string>val);
	}
	else if(typeof val == type<native>)
	{
		var len = strlen(val);
		val = val[0 .. len];

		var key{2} = {0, 0};
		var escapeLen = 0;
		for(var i = 0; i < len; i++)
		{
			key[0] = val[i];
			if(key in escapeSequences)
			{
				escapeLen += 2;
			}
			else if(val[i] & 0x80)
			{
				if(val[i] & 0x20)
				{
					i += 2;
					escapeLen += 4;
				}
				else
				{
					i++;
					escapeLen += 5;
				}
			}
			else if(val[i] < ' ' || val[i] > '~')
			{
				escapeLen += 6;
			}
		}

		var buff = new array{3 + len + escapeLen};
		var buffptr = buff;
		*buffptr++ = '"';

		for(var i = 0; i < len; i++)
		{
			key[0] = val[i];
			if(key in escapeSequences)
			{
				buffptr += sprintf(buffptr, "\\%c", escapeSequences[key]);
			}
			else if(val[i] & 0x80)
			{
				var utfVal;
				if(val[i] & 0x20)
					utfVal = ((val[i] & 0x0F) << 12) | ((val[++i] & 0x3F) << 6) | (val[++i] & 0x3F);
				else
					utfVal = ((val[i] & 0x1F) << 6) | (val[++i] & 0x3f);

				buffptr += sprintf(buffptr, "\\u%02hhx%02hhx", (utfVal >> 8) & 0xFF, utfVal & 0xFF);
			}
			else if(val[i] < ' ' || val[i] > '~')
			{
				buffptr += sprintf(buffptr, "\\u00%02hhx", val[i]);
			}
			else
			{
				*buffptr++ = val[i];
			}
		}

		*buffptr++ = '"';
		*buffptr = 0;
		return as<native>strdup(buff);
	}
	else if(val instanceof List)
	{
		var array[val.length];
		val.toArray(array);
		return json_encode(array);
	}
	else if(typeof val == type<pointer> && sizeof val > 0)
	{
		var len = 2;
		var strings[sizeof val];
		for(var i = 0; i < sizeof val; i++)
		{
			strings[i] = json_encode(val[i]);
			len += strlen(strings[i]) + 1;
		}

		var buff = new array{len};
		buff[0] = '[';
		var buffptr = buff + 1;

		for(var i = 0; i < sizeof val; i++)
		{
			buffptr += sprintf(buffptr, "%s,", strings[i]);
			free(strings[i]);
		}

		*buffptr-- = 0;
		*buffptr = ']';
		return buff;
	}
	else if(typeof val == type<struct>)
	{
		var count = 0;
		foreach(key in val)
			count++;

		var i = 0;
		var keyStrings[count];
		var valueStrings[count];
		var len = 2;

		foreach(key, value in val)
		{
			keyStrings[i] = json_encode(key);
			valueStrings[i] = json_encode(value);
			len += strlen(keyStrings[i]) + strlen(valueStrings[i]) + 2;
			i++;
		}

		var buff = new array{len};
		buff[0] = '{';
		var buffptr = buff + 1;

		for(var i = 0; i < count; i++)
		{
			buffptr += sprintf(buffptr, "%s:%s,", keyStrings[i], valueStrings[i]);
			free(keyStrings[i]);
			free(valueStrings[i]);
		}

		*buffptr-- = 0;
		*buffptr = '}';
		return buff;
	}
	else
	{
		return json_encode(cast<string>val);
	}
}

function json_decode(str)
{
	var parseArray;
	var parseObject;

	function skipSpaces()
	{
		while(*str == ' ' || *str == '\t' || *str == '\n')
			str++;
	}
	function parseString(buff, max)
	{
		if(*str++ != '"')
			throw "Invalid JSON, expected \" got $%c{*--str}";

		if(typeof buff == type<undefined>)
		{
			var ptr = str;
			while(*ptr != '"' && *ptr != 0)
			{
				if(*ptr == '\\')
					ptr++;
				ptr++;
			}

			var len = ptr - str + 1;
			if(typeof max != type<undefined> && max < len)
				throw "Cannot fit string of size $len into buffer of size $max";

			max = len;
			buff = new array{len};
		}

		if(typeof max == type<undefined>)
			max = sizeof buff;

		var curr = *str;
		var i = 0;
		for(; curr != '"' && curr != 0; i++)
		{
			if(i >= max)
				throw "String too long for buffer of size $max";

			if(curr == '\\')
			{
				curr = *++str;

				if(curr == 'u')
				{
					var num{} = {str[1], str[2], str[3], str[4], 0};
					str += 4;
					var val = strtol(num, NULL, 16) & 0xFFFF;

					if(val <= 0x7F)
					{
						buff[i] = val;
					}
					else if(val <= 0x7FF)
					{
						buff[i] = 0xC0 | ((val >> 6) & 0x3F);
						buff[++i] = 0x80 | (val & 0x3F);
					}
					else
					{
						buff[i] = 0xE0 | ((val >> 12) & 0x0F);
						buff[++i] = 0x80 | ((val >> 6) & 0x3F);
						buff[++i] = 0x80 | ((val >> 6) & 0x3F);
					}
				}
				else
				{
					var key{} = {curr, 0};
					if(key in unescapeSequences)
						buff[i] = unescapeSequences[key];
					else
						throw "Unknown escape sequence \\$%c{curr}";
				}
			}
			else
			{
				buff[i] = curr;
			}

			curr = *++str;
		}

		if(*str == 0)
			throw "Invalid JSON, expected \" got EOF";

		buff[i] = 0;

		str++;
		return buff;
	}
	function parseValue()
	{
		if(*str == '{')
			return parseObject();
		if(*str == '[')
			return parseArray();
		if(*str == '"')
			return parseString();

		if((*str >= '0' && *str <= '9') || *str == '-')
		{
			var start = str;
			var val = strtol(str, &str, 0);
			if(*str == '.' || *str == 'e')
				val = strtod!double(start, &str);

			return val;
		}

		if(strncmp(str, "null", 4) == 0)
		{
			str += 4;
			return undefined;
		}
		if(strncmp(str, "true", 4) == 0)
		{
			str += 4;
			return true;
		}
		if(strncmp(str, "false", 5) == 0)
		{
			str += 5;
			return false;
		}

		throw "Invalid JSON, expected value got $%c{*str}";
	}
	function parseArray()
	{
		var list = new List();

		if(*str++ != '[')
			throw "Invalid JSON, expected [ got $%c{*--str}";

		if(*str == ']')
		{
			str++;
			return list;
		}

		while(true)
		{
			skipSpaces();
			list.add(parseValue());
			skipSpaces();

			if(*str == ']')
				break;
			if(*str++ != ',')
				throw "Invalid JSON, expected , got $%c{*--str}";
		}

		str++;
		return list;
	}
	function parseObject()
	{
		var val = new Map();

		if(*str++ != '{')
			throw "Invalid JSON, expected { got $%c{*--str}";

		if(*str == '}')
		{
			str++;
			return val;
		}

		var key{32};
		while(true)
		{
			skipSpaces();
			parseString(key);
			skipSpaces();

			if(*str++ != ':')
				throw "Invalid JSON, expected : got $%c{*--str}";

			skipSpaces();
			val[key] = parseValue();
			skipSpaces();



			if(*str == '}')
				break;
			if(*str++ != ',')
				throw "Invalid JSON, expected , got $%c{*--str}";
		}
		str++;

		return val;
	}

	var parsed = parseValue();
	skipSpaces();
	if(*str != 0)
		throw "Invalid JSON, expected EOF got $%c{*str}";

	return parsed;
}

function json_destroy(value)
{
	if(value instanceof Map)
	{
		foreach(key, val in value)
			json_destroy(val);

		delete value;
	}
	else if(value instanceof List)
	{
		foreach(val in value)
			json_destroy(val);

		delete value;
	}
	else if(typeof value == type<native>)
	{
		free(value);
	}
}
