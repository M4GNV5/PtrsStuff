import strcmp, strncpy;

struct MapEntry
{
	key{32};
	value;
	next = null;

	constructor(key, value)
	{
		if(key)
			strncpy(this.key, cast<native>key, 31);
		this.key[31] = 0;
		this.value = value;
	}
};

struct Map
{
	first = null;
	length = 0;
	newEntry;

	constructor()
	{
		this.newEntry = new MapEntry();
	}
	destructor()
	{
		var curr = this.first;
		while(curr != null)
		{
			var _curr = curr;
			curr = curr.next;
			delete _curr;
		}

		delete this.newEntry;
	}

	operator this.key
	{
		return this.get(key);
	}
	operator this[key]
	{
		return this.get(key);
	}
	operator sizeof this
	{
		return this.length;
	}

	getEntry(key, previous = null)
	{
		if(typeof this.newEntry.value != type<undefined>)
		{
			this.newEntry.next = this.first;
			this.first = this.newEntry;
			this.newEntry = new MapEntry();
		}

		key = cast<native>key;
		var prev = null;
		var curr = this.first;
		while(curr != null)
		{
			if(strcmp(key, curr.key) == 0)
			{
				if(previous != null)
					*previous = prev;
				return curr;
			}

			prev = curr;
			curr = curr.next;
		}

		if(previous != null)
			*previous = prev;
		return null;
	}

	has(key)
	{
		return !!this.getEntry(key);
	}

	get(key)
	{
		var entry = this.getEntry(key);
		if(entry != null)
		{
			return &entry.value;
		}
		else
		{
			strncpy(this.newEntry.key, cast<native>key, 31);
			this.newEntry.key[31] = 0;
			return &this.newEntry.value;
		}
	}

	remove(key)
	{
		var prev;
		var entry = this.getEntry(key, &prev);
		if(entry == null)
		{
			throw "Cannot remove non exisiting key '%s'" % key;
		}
		else
		{
			if(prev == null)
				this.first = entry.next;
			else
				prev.next = entry.next;

			this.length--;
			var val = entry.value;
			delete entry;
			return val;
		}
	}
};
