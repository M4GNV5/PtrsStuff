import strcmp, strncpy;

struct MapEntry
{
	key{32};
	value;
	next = null;

	constructor(key, value)
	{
		if(typeof key != type<undefined>)
			strncpy(this.key, cast<string>key, 31);
		this.key[31] = 0;
		this.value = value;
	}
};

struct Map
{
	private _length = 0;
	first = null;

	get count
	{
		return _length;
	}

	destructor()
	{
		var curr = this.first;
		while(curr != null)
		{
			var _curr = curr;
			curr = curr.next;
			delete _curr;
		}
	}

	private getEntry(key, previous = null, doThrow = true)
	{
		key = cast<string>key;
		var prev = null;
		var curr = this.first;
		while(curr != null)
		{
			if(strcmp(key, curr.key) == 0)
			{
				if(previous != null)
					*previous = prev;
				return curr;
			}

			prev = curr;
			curr = curr.next;
		}

		if(doThrow)
			throw "Map has no key '$key'";

		if(previous != null)
			*previous = prev;
		return null;
	}

	remove(key)
	{
		var prev;
		var entry = getEntry(key, &prev);
		if(entry == null)
		{
			throw "Cannot remove non exisiting key '$key'";
			return undefined;
		}
		else
		{
			if(prev == null)
				this.first = entry.next;
			else
				prev.next = entry.next;

			_length--;
			var val = entry.value;
			delete entry;
			return val;
		}
	}

	operator this.key
	{
		return getEntry(key).value;
	}
	operator this[key]
	{
		return getEntry(key).value;
	}

	operator this.key = val
	{
		this[key] = val;
	}
	operator this[key] = val
	{
		var entry = getEntry(key, _, false);

		if(entry)
		{
			entry.value = val;
		}
		else
		{
			var entry = new MapEntry(key, val);
			entry.next = first;
			first = entry;

			_length++;
		}
	}

	operator &this.key
	{
		return &(getEntry(key).value);
	}
	operator &this[key]
	{
		return &(getEntry(key).value);
	}

	operator this.key(args...)
	{
		return getEntry(key).value(...args);
	}
	operator this[key](args...)
	{
		return getEntry(key).value(...args);
	}

	operator key in this
	{
		return !!getEntry(key, _, false);
	}
	operator sizeof this
	{
		return _length;
	}
	operator foreach in this
	{
		var curr = this.first;
		while(curr != null)
		{
			if(yield curr.key, curr.value, &curr.value)
				return;
			curr = curr.next;
		}
	}
};
