import poll, bind, listen, connect, accept as posix_accept, send as posix_send, recv as posix_recv,
	socket, close, getsockname, getpeername, inet_ntop, getaddrinfo, freeaddrinfo,
	memcpy, memset, strlen, malloc, realloc, free;

const INT_MAX = 0x7fffffff;

const AI_PASSIVE = 1;

const MSG_WAITALL = 256;
const POLLIN = 1;

const SOCK_STREAM = 1;
const SOCK_DGRAM = 2;
const SOCK_RAW = 3;
const SOCK_RDM = 4;
const SOCK_SEQPACKET = 5;

const AF_UNSPEC = 0;
const AF_UNIX = 1;
const AF_LOCAL = 1;
const AF_INET = 2;
const AF_AX25 = 3;
const AF_IPX = 4;
const AF_APPLETALK = 5;
const AF_ATMPVC = 8;
const AF_X25 = 9;
const AF_INET6 = 10;
const AF_NETLINK = 16;
const AF_PACKET = 17;

struct pollfd
{
	fd : int;
	events : short;
	revents : short;

	constructor(_fd = -1, _events = 0)
	{
		fd = _fd;
		events = _events;
	}
};

struct addrinfo
{
	flags : int;
	family : int;
	socktype : int;
	protocol : int;
	addrlen : u32; //sizeof(socklen_t) == 4
	addr : native; //struct sockaddr
	name : native; //char *
	next : native; //struct addrinfo
};
function createSocket(creator, host, port, socktype, family, flags)
{
	var hint : addrinfo();
	memset(hint, 0, sizeof(addrinfo));
	hint.flags = flags;
	hint.family = family;
	hint.socktype = socktype;

	var result = NULL;
	var err = getaddrinfo(host, port, hint, &result);

	var sock;
	var curr = result;
	while(curr != null)
	{
		curr = cast_stack<addrinfo>curr;

		sock = socket(curr.family, curr.socktype, curr.protocol);
		if(sock < 0 || sock > INT_MAX)
		{
			curr = curr.next;
			continue;
		}

		if(creator(sock, curr.addr, curr.addrlen) == 0)
			break;

		close(sock);
		curr = curr.next;
	}

	freeaddrinfo(result);

	if(curr == null)
		return null;
	else
		return sock;
}

struct sockaddr
{
	family : short;
	port : ushort;
	data{12};
};
function getSocketIp(getname, sockfd, buff)
{
	var addr : sockaddr();
	var len = sizeof(sockaddr);

	if(getname(sockfd, addr, &len) != 0)
		throw "Failed to receive address";

	if(addr.family != AF_INET && addr.family != AF_INET6)
		throw "get*Address can only be called on sockets using AF_INET or AF_INET6";

	if(inet_ntop(addr.family, addr.data, buff, len) == NULL)
		throw "Failed to convert address";
}

struct Socket
{
	sockfd;
	private _closed = false;

	buff{1024};
	bufflen = -1;
	buffptr = NULL;

	get closed
	{
		return _closed;
	}

	constructor(host, port, family = AF_UNSPEC, socktype = SOCK_STREAM)
	{
		buffptr = buff;
		if(host == Socket)
			return; //manual construction (e.g. via SocketServer)

		if(typeof port == type<int>)
			port = cast<native>port;

		sockfd = createSocket(connect, host, port, socktype, family, 0);
		if(sockfd == null)
		{
			delete this;
			throw "Failed to connct to %s:%s" % host, port;
		}
	}
	destructor()
	{
		if(sockfd != null)
			close(sockfd);
	}

	getLocalAddress(ipBuff)
	{
		getSocketIp(getsockname, sockfd, ipBuff);
	}

	getRemoteAddress(ipBuff)
	{
		getSocketIp(getpeername, sockfd, ipBuff);
	}

	available(timeout = 0)
	{
		if(buff + bufflen <= buffptr)
		{
			var fds : pollfd(sockfd, POLLIN);
			var ret = poll(fds, 1, timeout);

			if(fds.revents & POLLIN)
				return true;
			else if(ret < 0 || ret > INT_MAX)
				throw "Failed to poll socket";
			else
				return false;
		}

		return true;
	}

	send(sendbuff, len, flags = 0)
	{
		if(_closed)
			throw "Cannot send with closed socket";

		posix_send(sockfd, sendbuff, len, flags);
	}
	sends(str, flags = 0)
	{
		if(_closed)
			throw "Cannot send with closed socket";

		posix_send(sockfd, str, strlen(str), flags);
	}
	sendc(c, flags = 0)
	{
		if(_closed)
			throw "Cannot send with closed socket";

		var sendbuff{1} = {c};
		posix_send(sockfd, sendbuff, 1, flags);
	}

	recv(recbuff, len)
	{
		var remaining = (buff + bufflen) - buffptr;
		if(len > remaining)
		{
			if(_closed)
				throw "Cannot read from closed socket";

			if(remaining > 0)
				memcpy(recbuff, buffptr, remaining);
			var ret = posix_recv(sockfd, recbuff + remaining, len - remaining, MSG_WAITALL);

			if(ret == 0)
				closed = true;
			return remaining + ret;
		}
		else
		{
			memcpy(recbuff, buffptr, len);
			buffptr += len;
			return len;
		}
	}
	readc()
	{
		if(buff + bufflen <= buffptr)
		{
			if(_closed)
				throw "Cannot read from closed socket";

			bufflen = posix_recv(sockfd, buff, 1024, 0);
			buffptr = buff;

			if(bufflen == 0)
			{
				_closed = true;
				return;
			}

			if(bufflen < 0 || bufflen > INT_MAX)
				throw "Failed to read from socket";
		}

	 	return *buffptr++;
	}
	read(buff, max, end = 0)
	{
		var i = 0;
		var val = end - 1;

		for(; !_closed && i < max && val != end; i++)
		{
			val = readc();
			buff[i] = val;
		}

		return i;
	}

	operator this => any
	{
		while(!_closed)
		{
			if(yield readc())
				return;
		}
	}

	operator val => this
	{
		var typ = typeof val;
		if(typ == type<int> || typ == type<float>)
			sendc(val);
		else if(typ == type<native>)
			sends(val);
		else
			throw "Cannot pipe a variable of type %d to a socket in an algorithm" % typ;
	}
};

struct SocketServer
{
	sockfd;

	constructor(port, backlog = 16, family = AF_UNSPEC, socktype = SOCK_STREAM)
	{
		if(typeof port == type<int>)
			port = cast<native>port;

		sockfd = createSocket(bind, NULL, port, socktype, family, AI_PASSIVE);
		if(sockfd == null)
		{
			delete this;
			throw "Failed to bind to %s" % port;
		}

		if(listen(sockfd, backlog) != 0)
		{
			delete this;
			throw "Failed to listen on port %s" % port;
		}
	}
	destructor()
	{
		if(sockfd != null)
			close(sockfd);
	}

	getLocalAddress(ipBuff)
	{
		getSocketIp(getsockname, sockfd, ipBuff);
	}

	accept(timeout = -1)
	{
		var fds : pollfd(sockfd, POLLIN);
		var ret = poll(fds, 1, timeout);

		if(ret == 0)
			return;
		else if(ret < 0 || ret > INT_MAX)
			throw "Failed to poll socket";

		var fd = posix_accept(sockfd, NULL, NULL); //TODO implement ip
		if(fd < 0 || fd > INT_MAX)
			throw "Failed to accept client";

		var sock = new Socket(Socket);
		sock.sockfd = fd;

		return sock;
	}
};

struct SocketSet
{
	private max = 0;
	private length = 0;
	private sockets = null;
	private fds = null;
	private freeIndex = -1;

	get capaticity
	{
		return max;
	}
	get count
	{
		return length;
	}

	constructor(startMax = 16)
	{
		max = cast<int>startMax;
		fds = as<native>malloc(sizeof(pollfd) * max);
		sockets = as<pointer>malloc(VARSIZE * max);
	}
	destructor()
	{
		free(fds);
		free(sockets);
	}

	operator foreach in this
	{
		for(var i = 0; i < length; i++)
		{
			if(typeof sockets[i] != type<struct>)
				continue;
			if(yield sockets[i])
				return;
		}
	}

	add(val)
	{
		var fd;
		if(val instanceof Socket || val instanceof SocketServer)
			fd = val.sockfd;
		else
			fd = val;

		if(typeof fd != type<int>)
			throw "Values provided to SocketSet.add must be Socket's, SocketServer's or file descriptors";

		var index;

		if(freeIndex >= 0)
		{
			length++;
			index = freeIndex;
			freeIndex = sockets[index];
		}
		else if(length < max)
		{
			index = length++;
		}
		else
		{
			max *= 2;
			index = length++;
			fds = realloc(fds, sizeof(pollfd) * max);
			sockets = realloc(sockets, VARSIZE * max);
		}

		var pollInfo = cast_stack<pollfd>(fds + sizeof(pollfd) * index);
		sockets[index] = val;

		pollInfo.fd = fd;
		pollInfo.events = POLLIN;
		pollInfo.revents = 0;
	}

	remove(val)
	{
		for(var i = 0; i < length; i++)
		{
			if(val == sockets[i])
			{
				var pollInfo = cast_stack<pollfd>(fds + sizeof(pollfd) * i);
				pollInfo.fd = -1;

				sockets[i] = freeIndex;
				freeIndex = i;
				length--;
				return;
			}
		}

		throw "Trying to remove a value that is not in the SocketSet";
	}

	check(timeout = -1)
	{
		var ret = poll(fds, length, timeout);
		if(ret < 0 || ret > INT_MAX)
			throw "Failed to poll SocketSet";
		else if(ret == 0)
			return;

		for(var i = 0; i < length; i++)
		{
			var pollInfo = cast_stack<pollfd>(fds + sizeof(pollfd) * i);
			if(pollInfo.revents & POLLIN)
				return sockets[i];
		}

		throw "poll returned %d but no pollfd has POLLIN set" % ret;
	}
};
