import "Socket" from "./network.ptrs";
import "sprintf", "printf", "usleep", "strstr", "strchr", "strlen", "atoi";

function escapeMsg(buff, str)
{
	var j = 0;
	for(var i = 0; str[i] != 0; i++)
	{
		buff[j] = '\\';

		if(str[i] == ' ')
			buff[++j] = 's';
		else if(str[i] == '\n')
			buff[++j] = 'n';
		else
			buff[j] = str[i];

		j++;
	}
	buff[j] = 0;
}

function unescapeMsg(buff, str)
{
	var j = 0;
	for(var i = 0; str[i] != 0; i++)
	{
		if(str[i] == ' ')
		{
			buff[j] = 0;
			return;
		}
		else if(str[i] == '\\')
		{
			i++;
			if(str[i] == 's')
				buff[j] = ' ';
			else if(str[i] == 'n')
				buff[j] = '\n';
			else
				buff[j] = '?';
		}
		else
		{
			buff[j] = str[i];
		}

		j++;
	}
}

struct TeamspeakQuery
{
	sock;
	ownId;

	constructor(host = "localhost", port = 10011)
	{
		this.sock = new Socket();
		this.sock.connect(host, port);

		while(!this.sock.available()) //wait for the connection to be ready
			usleep(200 * 1000);

		this.command("use 1");
	}

	login(user, pw, nick = user)
	{
		this.command("login ", user, " ", pw);
		this.command("clientupdate client_nickname=", nick);

		this.send("whoami");
		var buff[512];
		var count = this.sock.read(buff, 511, '\n');
		buff[count] = 0;
		this.ownId = atoi(strstr(buff, "client_id=") + strlen("client_id="));
	}

	join(channel)
	{
		this.command("clientmove clid=", this.ownId, " cid=", channel);

		this.command("servernotifyregister event=textprivate");
		this.command("servernotifyregister event=textchannel");
	}

	msgPriv(user, msg)
	{
		this.msg("1", user, msg);
	}

	msgChannel(chan, msg)
	{
		this.msg("2", chan, msg);
	}

	msg(mode, target, msg)
	{
		var buff[256];
		escapeMsg(buff, msg);

		this.command("sendtextmessage targetmode=", mode, " target=", target, " msg=", buff);
	}

	receive(msgbuff, senderbuff = null, modeptr = null)
	{
		var buff[512];
		while(true)
		{
			var count = this.sock.read(buff, 511, '\n');
			buff[count] = 0;

			if(strstr(buff, "notifytextmessage") != NULL)
			{
				unescapeMsg(msgbuff, cast<native>strstr(buff, "msg=") + 4);

				if(modeptr != NULL)
					*modeptr = atoi(strstr(buff, "targetmode=") + strlen("targetmode="));

				if(senderbuff != NULL)
				{
					var sender = strstr(buff, "invokername=") + strlen("invokername=");
					sprintf(senderbuff, "%.*s", strchr(sender, ' ') - sender, sender);
				}

				return atoi(strstr(buff, "invokerid=") + strlen("invokerid="));
			}
		}
	}

	command()
	{
		this.sendv(arguments);
		while(true)
		{
			var buff[128];
			var count = this.sock.read(buff, 127, '\n');
			buff[count] = 0;

			if(strstr(buff, "error") != NULL)
			{
				var id = atoi(strstr(buff, "id=") + 3);
				if(id == 0)
					return;

				var msgbuff[128];
				unescapeMsg(msgbuff, cast<native>strstr(buff, "msg=") + 4);
				throw "Teamspeak server returned error %d: %s", id, buff;
			}
		}
	}

	send()
	{
		this.sendv(arguments);
	}

	sendv(args)
	{
		while(*args != NULL)
		{
			var val = *args++;
			if(typeof val == type<native>)
			{
				this.sock.sends(val);
			}
			else if(typeof val == type<int>)
			{
				var buff[16];
				sprintf(buff, "%ld", val);
				this.sock.sends(buff);
			}
			else
			{
				throw "Cannot send variable of type %d", typeof val;
			}
		}
		this.sock.sends("\n");
	}
};
