import curl_global_init, curl_easy_init, curl_easy_setopt, curl_easy_perform, curl_easy_strerror,
	curl_easy_getinfo, curl_easy_cleanup, curl_slist_append, curl_slist_free_all from "libcurl.so";
import realloc, free, memcpy, strchr, strdup;
import Map from "./map.ptrs";

const CURL_GLOBAL_ALL = 3;
const CURLINFO_RESPONSE_CODE = 2097154;

const CURLOPT_URL = 10002;
const CURLOPT_HTTPHEADER = 10023;
const CURLOPT_ERRORBUFFER = 10010;
const CURLOPT_WRITEFUNCTION = 20011;
const CURLOPT_WRITEDATA = 10001;
const CURLOPT_HEADERFUNCTION = 20079;
const CURLOPT_HEADERDATA = 10029;
const CURLOPT_POST = 47;
const CURLOPT_POSTFIELDS = 10015;
const CURLOPT_POSTFIELDSIZE = 60;

curl_global_init(CURL_GLOBAL_ALL);

function dataWriter(buff, size, count, data)
{
	var buffLen = size * count;
	data = *as<pointer>data;
	buff = (as<native>buff)[0 .. buffLen];

	with(data)
	{
		if(sizeof .body - .bodyIndex < sizeof buff - 1)
		{
			var len = sizeof .body;
			if(len == 0)
				len = 1024;

			while(len < sizeof(.body) + sizeof(buff) - 1)
				len *= 2;

			.body = realloc!native(.body, len)[0 .. len];
		}

		memcpy(.body + .bodyIndex, buff, sizeof buff);
		.bodyIndex += sizeof buff;
		.body[.bodyIndex] = 0;
	}

	return buffLen;
}

function headerWriter(buff, size, count, data)
{
	var len = size * count;
	data = *as<pointer>data;
	buff = (as<native>buff)[0 .. len];

	var value = strchr!native(buff, ':');
	if(value)
	{
		*strchr!native(buff, '\n') = 0;
		value += 2; //skip ;
		var name{value - buff};
		memcpy(name, buff, sizeof(name) - 2);
		name[sizeof(name) - 2] = 0;

		data.header[name] = strdup!native(value);
	}

	return len;
}

struct HTTP
{
	code : long;
	header = null;
	body = NULL;
	internal bodyIndex = 0;

	constructor(url, reqHeader, postData)
	{
		var errbuff{256};
		var ctx = curl_easy_init();
		curl_easy_setopt(ctx, CURLOPT_URL, url);
		curl_easy_setopt(ctx, CURLOPT_ERRORBUFFER, errbuff);
		curl_easy_setopt(ctx, CURLOPT_WRITEFUNCTION, dataWriter);
		curl_easy_setopt(ctx, CURLOPT_WRITEDATA, &this);

		header = new Map();
		curl_easy_setopt(ctx, CURLOPT_HEADERFUNCTION, headerWriter);
		curl_easy_setopt(ctx, CURLOPT_HEADERDATA, &this);

		if(postData)
		{
			postData = cast<native>postData;
			curl_easy_setopt(ctx, CURLOPT_POST, true);
			curl_easy_setopt(ctx, CURLOPT_POSTFIELDS, postData);
			//curl_easy_setopt(ctx, CURLOPT_POSTFIELDSIZE, sizeof postData);
		}

		var list = NULL;
		if(reqHeader)
		{
			foreach(key, val in reqHeader)
			{
				list = curl_slist_append(list, "$key: $val");
			}

			curl_easy_setopt(ctx, CURLOPT_HTTPHEADER, list);
		}

		try
		{
			var res = curl_easy_perform(ctx);
			if(res != 0)
				throw errbuff;

			curl_easy_getinfo(ctx, CURLINFO_RESPONSE_CODE, &this.code);
		}
		finally
		{
			curl_easy_cleanup(ctx);

			if(reqHeader)
				curl_slist_free_all(list);
		}
	}
	destructor()
	{
		free(body);

		foreach(key, val in header)
			free(val);
		delete header;
	}

	static GET(url, reqHeader)
	{
		return new HTTP(url, reqHeader);
	}

	static POST(url, data, reqHeader)
	{
		return new HTTP(url, reqHeader, data);
	}
};
