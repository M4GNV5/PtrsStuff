import pthread_* from "libpthread.so.0";

struct MutexWrap
{
	private wrap;
	private allowAddress;
	mutex{64};

	constructor(obj, allowAddr = false)
	{
		wrap = obj;
		allowAddress = allowAddr;
		pthread_mutex_init(mutex, NULL);
	}
	destructor()
	{
		pthread_mutex_destroy(mutex);
	}

	lock()
	{
		pthread_mutex_lock(mutex);
	}
	unlock()
	{
		pthread_mutex_unlock(mutex);
	}

	operator this.key
	{
		return this[key];
	}
	operator this[key]
	{
		pthread_mutex_lock(mutex);
		var val = wrap[key];
		pthread_mutex_unlock(mutex);
		return val;
	}

	operator this.key = val
	{
		this[key] = val;
	}
	operator this[key] = val
	{
		pthread_mutex_lock(mutex);
		wrap[key] = val;
		pthread_mutex_unlock(mutex);
	}

	operator &this.key
	{
		return &this[key];
	}
	operator &this[key]
	{
		if(!allowAddress)
			throw "Cannot get the address of property '$key' of a mutex-wrapped object";

		pthread_mutex_lock(mutex);
		var ptr = &wrap[key];
		pthread_mutex_unlock(mutex);
		return ptr;
	}

	operator this.key(args...)
	{
		return this[key](...args);
	}
	operator this[key](args...)
	{
		pthread_mutex_lock(mutex);
		var val = wrap[key](...args);
		pthread_mutex_unlock(mutex);
		return val;
	}
};
