import IrcClient from "../libs/irc.ptrs";
import printf, sprintf, strcpy, strcmp, strstr, strchr, strlen, sscanf, qsort, rand, srand, time, sleep;
srand(time(NULL));

var host = "irc.rizon.net";
//var host = "127.0.0.1";
var port = 6667;
var channel = "#botdev";
var nick = "MunchkinLLBot";

var client = new IrcClient(host, port, nick);
printf("Connected\n");
sleep(1);
client.join(channel);

var playerCount = 0;
var player[6];
var ingame = false;

var cardPrototypes;
var cards = {0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 7};
var cardIndex = -1;

var broadcast;
var draw;

struct Card
{
	name;
	description;
	play; //(self, target, arg)
	event; //(id, self) //id 0 -> before play, id 1 -> on discard

	constructor(name, description, play, event = null)
	{
		this.name = name;
		this.description = description;
		this.play = play;
		this.event = event;
	}
};

struct Player
{
	nick{32};
	card;
	alive;
	protected;

	loose(killer, card)
	{
		if(this.protected)
		{
			broadcast("%s tried to kill %s using the %s but he is protected"
				% killer.nick, this.nick, card.name, this.nick);
			return;
		}

		broadcast("%s is out because of %s's card %s. %s's handcard was %d.%s" %
			this.nick, killer.nick, card.name, this.nick, this.card + 1, cardPrototypes[this.card].name);

		this.alive = false;

		var aliveCount = 0;
		var lastMan;
		for(var i = 0; i < playerCount; i++)
		{
			if(player[i].alive)
			{
				aliveCount++;
				lastMan = player[i];
			}
		}

		if(aliveCount == 1)
		{
			broadcast("The game ended, the winner is %s" % lastMan.nick);
			ingame = false;
		}
	}
};

cardPrototypes = [
	new Card("Potted Plant", "Guess a players card, if you're right, hes out.", (self, target, arg) ->
	{
		if(arg <= 1 || arg > 8)
		{
			client.notice(self.nick, "Invalid argument, You have to guess the enemies card (number 2-8)");
			return false;
		}

		if(target.card == arg - 1)
		{
			target.loose(self, cardPrototypes[0]);
		}
		else
		{
			broadcast("%s played the 1.Potted Plant and guessed that %s has the card %d.%s but was wrong" %
				self.nick, target.nick, arg, cardPrototypes[arg - 1].name);
		}
		return true;
	}),
	new Card("Maul Rat", "Look at a hand.", (self, target) ->
	{
		client.notice(self.nick, "%s's handcard is %d. %s" % target.nick, target.card + 1, cardPrototypes[target.card].name);
		broadcast("%s spy'ed %s's card using a Maul Rat." % self.nick, target.nick);
		return true;
	}),
	new Card("Duck of Doom", "Compare two hands; Lower hand is out.", (self, target) ->
	{
		if(self.card < target.card)
			target.loose(self, cardPrototypes[2]);
		else if(self.card > target.card)
			target.loose(self, cardPrototypes[2]);
		else
			broadcast("%s used Duck of Doom on %s but nothing happened" % self.nick, target.nick);
		return true;
	}),
	new Card("Wishing Ring", "Protection until next turn", (self, target) ->
	{
		broadcast("%s plays the 4.Wishing Ring on %s who is now protected until his next turn." % self.nick, target.nick);
		target.protected = true;
		return true;
	}),
	new Card("Net Troll", "One player discards his or her hand", (self, target) ->
	{
		broadcast("%s plays the Net Troll on %s. %s discards his card %s" %
			self.nick, target.nick, target.nick, cardPrototypes[target.card].name);

		if(cardPrototypes[target.card].event != null)
			cardPrototypes[target.card].event(1, target);
		if(target.alive)
		{
			target.card = draw();
			if(ingame)
				client.notice(target.nick, "Your new handcard is %d.%s" % target.card + 1, cardPrototypes[target.card].name);
		}
		return true;
	}),
	new Card("Dread Gazebo", "Trade cards.", (self, target) ->
	{
		broadcast("%s plays the 6.Dread Gazebo and trades card with %s" % self.nick, target.nick);

		var tmp = target.card;
		target.card = self.card;
		self.card = tmp;

		client.notice(self.nick, "You got the %d.%s" % self.card + 1, cardPrototypes[self.card].name);
		client.notice(target.nick, "You got the %d.%s" % target.card + 1, cardPrototypes[target.card].name);
		return true;
	}),
	new Card("Turbonium Dragon", "Discard if with Dread Gazebo or Net Troll", (self) ->
	{
		broadcast("%s plays the Turbonium Dragon" % self.nick);
		return true;
	},
	(id, self, other) ->
	{
		if(id == 0 && (other == 6 || other == 5))
		{
			broadcast("%s plays the Turbonium Dragon" % self.nick);
			return true;
		}
	}),
	new Card("Loot!", "Loose if discarded", (self) ->
	{
		self.loose(self, cardPrototypes[7]);
		return true;
	},
	(id, self) ->
	{
		if(id == 1)
			self.loose(self, cardPrototypes[7]);
	})
];

function broadcast(msg)
{
	client.send(channel, msg);
}

function draw()
{
	cardIndex++;

	if(cardIndex >= 16)
	{
		var max = -1;
		var winner;
		for(var i = 0; i < playerCount; i++)
		{
			if(player[i].alive && player[i].card > max)
			{
				max = player[i].card;
				winner = player[i];
			}
		}

		broadcast("Out of cards. The winner is %s as he has the highest card %s" %
			winner.nick, cardPrototypes[max].name);

		ingame = false;
		return;
	}

	return cards[cardIndex];
}

for(var i = 0; i < 6; i++)
{
	player[i] = new Player();
}

var sender{64};
var chan{64};
var message{512};
while(true)
{
	client.receive(sender, chan, message);
	printf("%10.10s|%10.10s : %s\n", sender, chan, message);

	if(strcmp(chan, channel) != 0)
		continue;

	if(strstr(message, "-join") == message)
	{
		strcpy(player[playerCount].nick, sender);
		playerCount++;

		if(playerCount == 6)
			ingame = true;

		broadcast("Waiting for %d more players. Type -start to start now." % 6 - playerCount);
	}
	else if(playerCount > 1 && strstr(message, "-start") == message)
	{
		ingame = true;
	}

	if(ingame)
	{
		qsort(cards, 16, 1, (a, b) -> rand() - 1073741824);
		qsort(player, playerCount, VARSIZE, (a, b) -> rand() - 1073741824);

		var welcomeMsg{256};
		strcpy(welcomeMsg, "Welcome to Munchkin Loot Letter. Players: ");
		printf("%d\n", playerCount);
		for(var i = 0; i < playerCount; i++)
		{
			player[i].alive = true;
			var msg = welcomeMsg + strlen(welcomeMsg);
			sprintf(msg, "%s, ", player[i].nick);
		}
		broadcast(welcomeMsg);

		for(var i = 0; i < playerCount; i++)
		{
			var card = draw();
			player[i].card = card;

			client.notice(player[i].nick, "Your handcard: %d.%s" %
				card + 1, cardPrototypes[card].name);
		}

		var turn = -1;
		var currPlayer;
		var card;

		function changeTurn()
		{
			var startTurn = turn;
			turn++;
			if(turn >= playerCount)
				turn = 0;

			while(!player[turn].alive)
			{
				turn++;
				if(turn >= playerCount)
					turn = 0;
			}

			currPlayer = player[turn];
			currPlayer.protected = false;

			broadcast("It is now %s's turn." % player[turn].nick);

			card = draw();
			if(!ingame)
				return;

			if(cardPrototypes[card].event != null)
			{
				if(cardPrototypes[card].event(0, currPlayer, currPlayer.card))
					return changeTurn();
			}
			if(cardPrototypes[currPlayer.card].event != null)
			{
				if(cardPrototypes[currPlayer.card].event(0, currPlayer, card))
					return changeTurn();
			}

			client.notice(currPlayer.nick, "It's your turn. Do you want to play %d.%s or %d.%s" %
				card + 1, cardPrototypes[card].name, currPlayer.card + 1, cardPrototypes[currPlayer.card].name);
		}
		changeTurn();

		while(ingame)
		{
			client.receive(sender, chan, message);
			printf("%10.10s|%10.10s : %s\n", sender, chan, message);

			if(message[0] == 'p' && message[1] == ' ' && strcmp(currPlayer.nick, sender) == 0)
			{
				var len = strlen(message);
				var place = message[2] - '0' - 1;

				if(place != card && place != currPlayer.card)
				{
					client.notice(currPlayer.nick, "You dont have the card %d.%s" %
						place + 1, cardPrototypes[place].name);
					continue;
				}

				var targetbuff[64];
				var arg = -1;
				sscanf(message + 4, "%s %ld", targetbuff, &arg);

				var target = -1;
				for(var i = 0; i < playerCount; i++)
				{
					if(strcmp(targetbuff, player[i].nick) == 0)
					{
						target = i;
						break;
					}
				}

				var _hand = currPlayer.card;
				currPlayer.card = place == card ? currPlayer.card : card;

				if(place < 7 && (target < 0 || target > playerCount || !player[target].alive))
				{
					currPlayer.card = _hand;
					client.notice(currPlayer.nick, "Invalid target use an id announced at the beginning of the game.");
				}
				else if(!player[target].alive)
				{
					currPlayer.card = _hand;
					client.notice(currPlayer.nick, "That targetted player is out of the game.");
				}
				else if(player[target].protected)
				{
					currPlayer.card = _hand;
					client.notice(currPlayer.nick, "That targetted player is protected.");
				}
				else if(!cardPrototypes[place].play(currPlayer, player[target], arg))
				{
					currPlayer.card = _hand;
				}
				else
				{
					if(ingame)
						changeTurn();
				}
			}
			else if(strstr(message, "help") == message)
			{
				if(message[4] != 0 && message[5] > '0' && message[5] < '9')
				{
					var cardId = message[5] - '0' - 1;
					client.send(chan, "%d. %s : %s" % cardId + 1,
						cardPrototypes[cardId].name, cardPrototypes[cardId].description);
				}
				else
				{
					client.send(chan, "Get information about cards using help cardid. e.g. help 1");
					client.send(chan, "Play a card using p cardid target argument"
						"e.g. p 1 Foo to play your card Potted Plant onto player Foo");
				}
			}
		}

		cardIndex = -1;
		playerCount = 0;
	}
}
