import usleep, strdup, strcpy, isprint, sprintf, printf, free;
import SocketServer from "../libs/network.ptrs";
import List from "../libs/list.ptrs";

var port = 3112;
var clients = new List();
var server = new SocketServer(port);
var broadcast;

struct Client
{
	nick{16};
	socket;
	antiSpam = 0;

	destructor()
	{
		if(this.socket)
			delete this.socket;

		broadcast(this.nick, '-', "left");
	}
};

function broadcast(nick, splitter, msg)
{
	var buff{512};
	sprintf(buff, "%-10.10s %c %s\n", nick, splitter, msg);
	printf("%s", buff);

	foreach(client, i in clients)
	{
		try
		{
			if(client.nick[0] != 1)
				client.socket.sends(buff);
		}
		catch(e)
		{
			printf("/!\\ %-6.6s ! %s\n", client.nick, e);
		}
	}
}

while(true)
{
	foreach(client, i in clients)
	{
		if(client.antiSpam > 0)
			client.antiSpam--;

		var sock = client.socket;
		try
		{
			if(sock.available())
			{
				var buff{256};
				var count = sock.read(buff, 255, '\n');
				buff[count - 1] = 0;
				var splitter = ':';

				var spaceOnly = true;
				function isSpaceOnly(c)
				{
					if(c != ' ')
						spaceOnly = false;
					return true;
				}

				buff[0 .. count] => isprint => isSpaceOnly => buff;

				client.antiSpam += 10;
				if(spaceOnly || client.antiSpam > 19)
					continue;

				if(client.nick[0] == 1)
				{
					buff[15] = 0;
					strcpy(client.nick, buff, 16);
					strcpy(buff, "joined");
					splitter = '-';
				}
				broadcast(client.nick, splitter, buff);
			}

			if(!sock.connected)
			{
				clients.remove(i);
				delete client;
				break;
			}
		}
		catch(e, trace)
		{
			printf("/!\\ %-6.6s ! %s\n%s", client.nick, e, trace);
			delete clients.remove(i);
			break;
		}
	}

	var sock = server.accept();
	if(sock)
	{
		var client = new Client();
		client.nick[0] = 1;
		client.socket = sock;

		sock.sends("Welcome to this simple chat written in PointerScript\n");
		sock.sends("You can read the source at http://bit.ly/1XaCDlz\nCurrently online: ");
		foreach(c in clients)
		{
			if(c.nick[0] != 1)
			{
				sock.sends(c.nick);
				sock.sends(", ");
			}
		}
		sock.sends("\nType your nickname: ");
		clients.add(client);
	}

	usleep(100000);
}
