import "free", "memset", "exit", "sleep";
import "json_encode" from "../libs/json.ptrs";
import "println" from "../libs/console.ptrs";
import "Socket" from "../libs/network.ptrs";
import "RegExp" from "../libs/regexp.ptrs";
import "Map" from "../libs/map.ptrs";



println(42);
println(3.14159);
println("Hello world");
println(Socket);
println(println);
println();



try
{
	var buff[256];
	var sock = new Socket();
	sock.connect("m4gnus.de", 3112);

	sock.getIp(buff, true);
	println("connected to", buff);
	sock.sends("Hello World\n");

	while(!sock.available(3000))
	{
		println("Aaaaand we're waiting...");
	}
	sleep(1);

	memset(buff, 0, 256);
	sock.readAvailable(buff, 255);
	println(buff);
	println();
}
catch(err, stack)
{
	println("Network library test failed:", err);
	println(stack);
}


function dumpMatches(reg, str)
{
	var matches = reg.match(str);
	println("For string", str);

	if(matches == NULL)
		return println("\tNo Match");

	var orginal = matches;
	var i = 0;
	while(*matches != NULL)
	{
		println("\tmatch", i++, ":", *matches);
		matches++;
	}
	free(orginal);
}
var reg = new RegExp("a?(b+)x{3}", true);
dumpMatches(reg, "abbxxx");
dumpMatches(reg, "aaaaaabbbbbxx");
dumpMatches(reg, "bbaabbbbbxxx");
println();



var map = new Map();
function tryGet(key)
{
	try
	{
		println("map[", key, "] =", map.get(key));
	}
	catch(err)
	{
		println("Map error:", err);
	}
}
map.set("foo", 42);
tryGet("foo");
map.set("foo", 1337);
tryGet("foo");
map.remove("foo");
tryGet("foo");

map.set("bar", 31.12);
map.set(42, map);
tryGet("bar");
tryGet(42);
tryGet("42");

map.free();



struct Test
{
	foo;
	bar;
	somekey;
	someFunction()
	{
		return 42;
	}
};

var instance = new Test();
instance.foo = 1337;
instance.bar = 3.14159;
instance.somekey = "Hello World!";

println(json_encode(instance));
free(instance);
