import printf, puts, free, strcmp, fopen, fclose, fprintf, atoi, isdigit, isspace;
import Map from "../libs/map.ptrs";
import List from "../libs/list.ptrs";
import byChar, ByLine, OrFilter, ValueFilter, BoundFilter from "../libs/algorithm.ptrs";
import RegExp from "../libs/regexp.ptrs";
import json_encode, json_decode, json_destroy from "../libs/json.ptrs";
import http_get from "../libs/http.ptrs";
import MutexWrap from "../libs/mutex.ptrs";
import pthread_create, pthread_join, pthread_self from "libpthread.so.0";

function dumpValue(mappy, indent = 0)
{
	if(mappy instanceof Map)
	{
		foreach(key, val in mappy)
		{
			for(var i = 0; i < indent; i++)
				printf(" ");

			if((val instanceof Map) || (val instanceof List))
			{
				printf("%*s:\n", indent - 32,key);
				dumpValue(val, indent + 4);
			}
			else
			{
				printf("%*s: %s\n", indent - 32, key, cast<native>val);
			}
		}
	}
	else if(mappy instanceof List)
	{
		foreach(val, i in mappy)
		{
			for(var i = 0; i < indent; i++)
				printf(" ");

			if(val instanceof Map || val instanceof List)
			{
				printf("%*d:\n", indent - 32, i);
				dumpValue(val, indent + 4);
			}
			else
			{
				printf("%*d: %s\n", indent - 32, i, cast<native>val);
			}
		}
	}
	else
	{
		for(var i = 0; i < indent; i++)
			printf(" ");
		printf("?????\n");
	}
}



function testMap()
{
	var mappy = new Map();
	function tryGet(key)
	{
		try
		{
			printf("mappy[%s] = %s\n", cast<native>key, cast<native>mappy[key]);
		}
		catch(err, trace)
		{
			printf("%s\n%s", err, trace);
		}
	}
	mappy.foo = 42;
	tryGet("foo");
	mappy.foo = 1337;
	tryGet("foo");
	mappy.remove("foo");
	tryGet("foo");

	mappy.bar = 31.12;
	mappy[42] = mappy;
	tryGet("bar");
	tryGet(42);
	tryGet("42");

	mappy.baz = (x, y) -> x - y;
	printf("mappy.baz(5, 7) = %d\n", mappy.baz(5, 7));

	delete mappy;
}

function testList()
{
	var list = new List();
	list.add("ahoi", 111, "yar har", 42, 3112);
	list.splice(3, 1, 13, 37);
	list[1] = list[1] * 6;

	var lastIndex = list.length;
	list.add((x, y) -> x * y);
	printf("list[%d](3, 5) = %d\n\n", lastIndex, list[lastIndex](3, 5));

	dumpValue(list);
	printf("\n");

	list.remove(13);
	list.removeAt(3);

	dumpValue(list);
	delete list;
}

function testAlgorithm()
{
	function nonZero(val)
	{
		printf("val = %d\n", val);
		return val == 0 ? false : true;
	}

	var fd = fopen("nums.txt", "w+");

	var list = new List();
	list.add("kek", "3\n14", "666\nlol\n42\n", "0", " \n  ", "3deep\n5me", "42\n");

	scoped list
		=> byChar
		=> new_stack OrFilter(isdigit, isspace) //TODO add a syntax for this (e.g. isdigit || isspace)
		=> new_stack ByLine()
		=> new_stack ValueFilter(atoi)
		=> nonZero
		=> new_stack BoundFilter(fprintf, _, 2, fd, "%d\n");
}

function testJson()
{
	struct Test
	{
		foo = "ahoi";
		bar = 666;
		somekey = undefined;
		nested = true;
		someFunction()
		{
			return 42;
		}
	};

	var instance : Test();
	var nested : Test();
	instance.foo = 31.12;
	instance.bar = List.fromArray([42, "yar har", 3.1415, "fiddlededi"]);
	instance.somekey = "Hello World!";
	instance.nested = nested;

	var str = json_encode(instance);
	printf("%s\n\n", str);

	var obj = json_decode(str);
	dumpValue(obj);
	printf("\n");

	free(str);
	json_destroy(obj);
}

function testRegExp()
{
	function dumpMatches(reg, str)
	{
		var matches = reg.match(str);
		printf("For string %s\n", str);

		if(matches == null)
			return printf("\tNo Match\n");

		for(var i = 0; matches[i] != NULL; i++)
		{
			printf("\tmatch %d: %s\n", i, matches[i]);
		}
		free(matches);
	}
	var reg = new RegExp("a?(b+)x{3}", true);
	dumpMatches(reg, "abbxxx");
	dumpMatches(reg, "aaaaaabbbbbxx");
	dumpMatches(reg, "bbaabbbbbxxx");
	printf("\n");
}

function testHttp()
{
	var resp = http_get("http://m4gnus.de/");
	printf("Response Code: %d\nReponse Message: %s\n", resp.code, resp.message);
	dumpValue(resp.header);
	printf("Content:\n%s\n", resp.content);
	delete resp;
}

function doStuff(val)
{
	val = *as<pointer>val;
	var self = pthread_self();

	printf("%llu trying...\n", self);
	val.loop(self);
	printf("%llu done!\n", self);
}
function testMutex()
{
	struct Test
	{
		loop(self)
		{
			printf("%llu in loop...\n", self);
			for(var i = 0; i < 100000000; i++)
				;
		}
	};

	var val = new MutexWrap(new Test());
	//var val = new Test();

	var threads[] = [0, 0, 0, 0];
	for(var i = 0; i < sizeof threads; i++)
	{
		pthread_create(threads + i, NULL, doStuff, &val);
	}
	for(var i = 0; i < sizeof threads; i++)
	{
		pthread_join(threads[i], NULL);
	}
}

var test = arguments[0] || "usage";

if(strcmp(test, "mappy") == 0)
	testMap();
else if(strcmp(test, "list") == 0)
	testList();
else if(strcmp(test, "algorithm") == 0)
	testAlgorithm();
else if(strcmp(test, "json") == 0)
	testJson();
else if(strcmp(test, "regexp") == 0)
	testRegExp();
else if(strcmp(test, "http") == 0)
	testHttp();
else if(strcmp(test, "mutex") == 0)
	testMutex();
else
	printf("Usage: ptrs test.ptrs <testcase>\nTestcase can be one of mappy, list, json, regexp and http\n");
