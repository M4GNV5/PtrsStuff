import printf;
import Map from "../libs/map.ptrs";
import json_encode, json_decode from "../libs/json.ptrs";
import http_get from "../libs/http.ptrs";

var map = new Map();
function tryGet(key)
{
	printf("map[%s] = %s\n", cast<native>key, cast<native>*map[key]);
}
*map.foo = 42;
tryGet("foo");
*map.foo = 1337;
tryGet("foo");
map.remove("foo");
tryGet("foo");

*map.bar = 31.12;
*map[42] = map;
tryGet("bar");
tryGet(42);
tryGet("42");

delete map;
printf("\n");



struct Test
{
	foo = "ahoi";
	bar = 666;
	somekey = undefined;
	nested = true;
	someFunction()
	{
		return 42;
	}
};

var instance : Test();
instance.foo = 1337;
instance.bar = 3112;
instance.somekey = "Hello World!";
instance.nested = new Test();

var str = json_encode(instance);
printf("%s\n", str);

printf("\n");

function dumpMap(map, indent = 0)
{
	map.x; //update map.newEntry
	var curr = map.first;
	while(curr != null)
	{
		for(var i = 0; i < indent; i++)
			printf(" ");

		if(curr.value instanceof Map)
		{
			printf("%*s:\n", indent - 32, curr.key);
			dumpMap(curr.value, indent + 4);
		}
		else
		{
			printf("%*s: %s\n", indent - 32, curr.key, cast<native>curr.value);
		}
		curr = curr.next;
	}
}
dumpMap(json_decode(str));
printf("\n");



var resp = http_get("http://m4gnus.de/");
printf("Response Code: %d\nReponse Message: %s\n", resp.code, resp.message);
dumpMap(resp.header);
printf("\nContent:\n%s\n", resp.content);
delete resp;
